-- include
-- - https://github.com/cleary/livecode/blob/main/weekly/20210921.tidal
-- midi0: Vital/Growl Bass Sidechain

let bass =  "[4 0 0 0 3 0 0 0 4 0 4 5]"
    mel1 = "0 3 [4 5] [8 7]"
    pat = "100010001011"

panic

do
    unsolo 1
    unsolo 2
    unsolo 3
    unsolo 4
    all $ id

-- xfadeIn 1 16
let bass =  "[4 0 0 0 3 0 0 0 4 0 4 5]"
    kickpat = "<[[11]00000] [1000100]>"
in
do
    resetCycles
    d1
        -- $ whenmod 8 6 (slow 2 . off (1/6) (|+ up 12))
        -- $ fast (2/3)
        -- $ mask (inv kickpat)
        -- $ struct "{ t*6 t*2 t*6}%3"
        $ struct "t*12"
        $ stack [
             almostNever (# legato 1.1) $
             -- whenmod 16 12 (jux (((1 + (1/3)) ~>) . (slow 2 . (# s "[jrhodes:5| jrhodes:4 | jrhodes:2]"))) . (# legato 0.5) . (# delay 1) . (# delayfb 0.9) . (# dt (1/8)) . (# cutoff 2000)) $
             -- whenmod 32 24 (|+ note (Note . fromIntegral . floor <$> range 0 14 (slow 4 sine))) $
             -- whenmod 32 28 (|- note (Note . fromIntegral . floor <$> range 0 6(fast 3 cosine))) $
             s "midi0"
             # note (scale "minor" (bass
                   -- + (floor <$> range 0 14 (slow 4 sine))
                   -- - (floor <$> range 0 6(fast 3 cosine))
                   )
                 )
             # legato "<[0.2 1.1 0.2] 0.2 1 <[1.1 1 1.1 0.8] 1>>"
             # pan 0.2
        ]
        # midichan 0 |- up 12 
        # cps 0.4
        -- # cps (range 0.2 1.2 "^9")

all $ id

let kickpat = "<[[11]00000] [1000100]>"
in
d2
    -- $ whenmod 8 6 (slow 2 . off (1/6) (|+ up 12))
    -- $ fast (2/3)
    -- $ mask (inv (kickpat))
    -- $ every 2 (struct "t*6")
    -- $ struct (kickpat)
    $ struct ("t*12")
    $ stack [
         -- someCyclesBy 0.3 (linger "[ s | t]") $ 
         -- whenmod 48 32 (|+ note (Note . fromIntegral . floor <$> range 0 14 (slow 4 sine))) $
         -- whenmod 50 24 ((|- note (Note . fromIntegral . floor <$> range 0 6(fast 3 cosine))) . (|+ note 12)) $
         s "[flbass | flbass:14?]"
         -- s "[ flbass:14]"
         # note (scale "minor" (bass
               -- + (floor <$> range 0 14 (slow 4 sine))
               -- - (floor <$> range 0 6(fast 3 cosine))
               )
             ) # cut 1 # crush 2
         -- # legato "<[0.2 1.1 0.2] 0.2 1 1.1>"
         # verb 0.6 0.5 0.1 0.2
         # gain 1.1
         # pan 0.8
         -- # cutoff (segment 8 $ rangex 100 5000 $ slow 16 saw)
    ]

unsolo 2

-- off beats
let kickpat = "<[[11]00000] [1000100]>"
    kpat2 = (/= 0) <$> (bass:: Pattern Int)
in
d3
    $ someCyclesBy 0.4 (mask kpat2 . (# verb 0 0 0 0) . (sometimes ((ply "[3 | 2 | 1]") . (# pan (rand)) . (# legato 0.5)) ) . (rarely (# speed "-0.5")) )
    $ someCyclesBy 0.1 (plyWith 2 ("t" <~))
    $ stack [
        struct kickpat $ s "[realclaps?, bd:4, clubkick, 808bd:1?]"
        , degradeBy 0.89 $ struct (inv kickpat) $ s "[sd]" |< n (irand 5) # speed 0.3
    ] # shape 0.5
    # verb 0.9 0.9 0.1 0.4
    # cutoff (segment 8 $ rangex 200 2000 $ slow 16 saw)
    -- # cutoff 2000
    # crush 3

-- drive beat
let kickpat = "<[111011] [111000] [111011] [[11]0101[01]]>"
    kpat2 = (/= 0) <$> (bass:: Pattern Int)
in
d4
    -- $ someCyclesBy 0.3 (linger "[ t | q]")
    $ stack [
        someCyclesBy 0.7 (mask kpat2)
        $ sometimes (ply 2) $ struct kickpat $ "[bd:4, clubkick]"
        , s "realclaps?"
        , almostNever (slow 1.5 . rev . plyWith "[8|12|4]" (# gain 0.85)) $ rarely (fast 2) $ struct (inv kickpat) $ s "[sd, realclaps?]" # gain 1.1
        , sometimesBy 0.2 (
            plyWith "[2|3|6]" ((# gain 0.7) )) 
            $ fast 2 $ struct "1[[11]0]10[11]0" 
            $ s "[<hc>, [~ ~ ~ ~ ~ ho:1/4]?]" 
            # hcutoff (stitch "{100100101}%10" "10000" "8000") 
        -- , s "ho(3,12,2)" # rings 0.9 0.8 0.6 0.7 0.9
    ]
    # shape 0.5
    # verb 0.8 0.8 0.1 0.2
    # speed 1

d3 silence

d4 silence

all $ spreadf [jux rev, (# hcutoff 2000), (# djfbus 111 (range 0.1 0.9 $ isaw)), id, ((# leslie 5) . (# lrate 0.9) . (# lsize (0.13*(slow 3 saw)))) , id,  (# accelerate (segment 12 $ "-2"*perlin)), id]

all $ every 2 (hurry 2 . (slow 3))

all $ id

d1 $ silence

let kickpat = "<[111011] [111000] [111011] [[11]0101[01]]>"
    kpat2 = (/= 0) <$> (bass:: Pattern Int)
in
d4
    -- $ every 4 (someCyclesBy 0.3 (linger "[ s | t ]"))
    $ fast "<[2 0.5 1] 2 1 0.5>"
    -- $ sometimes (hurry "<[2 0.5 2] 2 1 0.5>")
    $ sometimesBy 0.21 (# verb "[0.8 0]" "[0.8 0]" 0.1 0.2) 
    $ stack [
        someCyclesBy 0.7 (mask kpat2)
        $ sometimes (ply 2) $ struct "t*3" $ "[bd:4, clubkick]"
        , s "realclaps?"
        , almostNever (slow 1.5 . rev . plyWith "[8|12|4]" (# gain 0.85)) $ rarely (fast 2) $ struct "000100" $ s "[sd, realclaps?]" # gain 1.1
        , sometimesBy 0.2 (
            plyWith "[2|3|6]" (rev . (|* gain 0.7) ))
            $ fast 2 $ struct "1[[11]0]10[11]0" 
            $ s "[<hc>, [~ ~ ~ ~ ~ ho:1/4]?]" 
            # hcutoff (stitch "{100100101}%10" "10000" "8000") 
        , s "ho(3,12,2)" # rings (0.9*(slow 7 $ sine)) 0.8 (0.6*(slow 4 $ saw)) 0.7 0.9
        , ply 2 $ struct (inv (kickpat)) $ s "linnhats" # end "{1}%16" |< n (segment 16 $ irand 4)
    ]
    # shape 0.5
    # verb 0.8 0.8 0.1 0.2
    # speed 1
    # gain 1.1

-- punctual
c1 << zoom (1.5 + ilo) $ (hsvrgb (fit (4/3) $ img "https://img.grbt.com.au/inf2.png" * [ifft fx*0.75, ifft fy]));
--c2 << zoom (2.5 + ilo) $ (hsvrgb (img "https://img.grbt.com.au/pattern4.jpg" * [ifft fx*0.75, ifft fy]));
c2 << zoom (2.5 + ilo) $ (hsvrgb (img "https://img.grbt.com.au/inf2.png" * [ifft fx*0.75, ifft fy]));
-- c2 << zoom (2.5 + ilo) $ (hsvrgb (img "https://img.grbt.com.au/pattern4.jpg"));
c3 << zoom (1.5 + ilo) $ (hsvrgb (fit (4/3) $ img "https://img.grbt.com.au/inf1.png" * [ifft fx*0.75, ifft fy]));
c << step [c1,c3] (lfsaw (cps/4));
mod << [rgbb c2, rgbr c2] +: sin [0.1 ~~ 0.8 $ 0.05, 0.2 ~~ 0.5 $ 0.01];
a << hline ([0.5, 0.8 .. 2.5 ]* ((ifft fx) * fy)) (0.5) * 0.6;
a * (setfxy c  mod) >> video;
spin 1 $ a *c >> video;
b << hline ([0.5, 0.8 .. 2.5 ]*((ifft fx) * (1- fy))) (0.9*ilo) * [sin 0.1, 1, 0.6, ifft fx];
-- move [saw 0.1,0] $ tile 1 $ tile (prox 0 ** imid) $ b/c >> rgba;
move [saw 0.1,0] $ tile 1 $ spin 1 $ b * [ifft fxy, 1, ifft fy] >> rgba;
-- 0.55 >> fdbk;
